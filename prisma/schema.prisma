// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  first_name       String
  last_name        String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  phone            String?
  dateOfBirth      DateTime?
  gender           String?
  address          String?
  country          String?
  career           String?
  role             Role      @default(user)
  password         String
  paddleCustomerId String?

  accounts    Account[]
  sessions    Session[]
  articleMeta UserArticleMeta[]
  isActive    Boolean           @default(false)

  userSubscription UserSubscription?

  companyId String?  @db.ObjectId
  company   Company? @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model ResetReq {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  otp           Int
  isOtpVerified Boolean  @default(false)
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsLetter {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type CategoryEmbedded {
  id   String
  name String
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  short_description String
  law_number        String

  categories CategoryEmbedded[]
  sections   Section[]
  published  Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  documentId String   @db.ObjectId
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  chapters Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  sectionId String  @db.ObjectId
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userMeta UserArticleMeta[] // Optional reverse relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserArticleMeta {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleId String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  selectedColor String? // e.g., "yellow", "blue", etc.
  isBookmarked  Boolean @default(false)
  comment       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId]) // Prevent duplicate entries per user/article
}

model Company {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String
  contact_email String
  overview      String
  employees     User[]

  subscriptions CompanySubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanySubscription {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId          String   @unique @db.ObjectId
  company            Company  @relation(fields: [companyId], references: [id])
  txn_id             String
  isActive           Boolean  @default(true)
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
}

model UserSubscription {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  txn_id             String   @unique
  sub_id             String   @unique
  isActive           Boolean  @default(false)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivacyPolicy {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermsOfService {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefundPolicy {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
